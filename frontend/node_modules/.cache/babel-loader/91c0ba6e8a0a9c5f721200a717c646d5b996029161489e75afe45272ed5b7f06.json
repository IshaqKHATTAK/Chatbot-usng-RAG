{"ast":null,"code":"var _jsxFileName = \"E:\\\\F\\\\8th semester\\\\full stack\\\\AI asistant\\\\project\\\\restaurant-chatbot\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport InputBox from './InputBox';\nimport Message from './Message';\nimport { ApiCall } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatWindow() {\n  _s();\n  const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  const handleQuestionSubmit = async question => {\n    setQuestionsAndAnswers(prevState => [...prevState, {\n      question,\n      answer: ''\n    }]); // Render the question immediately\n\n    try {\n      const responseData = await ApiCall(question);\n      updateAnswer(responseData.message, question); // Update the answer once the response is received\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      updateAnswer('An error occurred while fetching data.', question); // Handle error\n    }\n  };\n  const updateAnswer = (answer, question) => {\n    setQuestionsAndAnswers(prevState => prevState.map(qa => qa.question === question ? {\n      ...qa,\n      answer\n    } : qa));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflowY: 'auto',\n      maxHeight: '80vh',\n      padding: '10px'\n    },\n    children: [\" \", questionsAndAnswers.map((qa, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        question: qa.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), qa.answer && /*#__PURE__*/_jsxDEV(Message, {\n        question: qa.answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 35\n      }, this), \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(InputBox, {\n      onSubmit: handleQuestionSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n// export default function ChatWindow(){\n//     const [question, setQuestion] = useState('');\n//     const [response, setResponse] = useState(null);\n//     // useEffect hook to fetch data from the API when the component mounts or question changes\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             if (question.trim() !== '') { // Only fetch data if the question is not empty\n//                 try {\n//                     const responseData = await ApiCall(question);\n//                     setResponse(responseData); // Update component state with the response from the API\n//                 } catch (error) {\n//                     console.error('Error fetching data:', error);\n//                 }\n//             }\n//         };\n//         fetchData(); // Call the fetchData function\n//     }, [question]); // Run useEffect whenever the question state changes\n\n//     const handleQuestionSubmit = (question) => {\n//         setQuestion(question)\n//         setResponse(null);\n//     }\n//     return(\n//         <>\n//         <div>\n//             <Message question={question} />\n//             {console.log('Response condition:', response)} {/* Log the condition */}\n//             {response && <Message question={response.message} />} {/* Render the response message if available */}\n//             <InputBox onSubmit={handleQuestionSubmit} />\n//         </div>\n//         </>\n//     )\n// }\n_s(ChatWindow, \"+uQt2RtPPtyrb9YR+9x8bk7TijM=\");\n_c = ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","InputBox","Message","ApiCall","jsxDEV","_jsxDEV","ChatWindow","_s","questionsAndAnswers","setQuestionsAndAnswers","handleQuestionSubmit","question","prevState","answer","responseData","updateAnswer","message","error","console","map","qa","style","overflowY","maxHeight","padding","children","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["E:/F/8th semester/full stack/AI asistant/project/restaurant-chatbot/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport InputBox from './InputBox';\r\nimport Message from './Message';\r\nimport { ApiCall } from './Api';\r\n\r\n\r\nexport default function ChatWindow() {\r\n    const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\r\n\r\n    const handleQuestionSubmit = async (question) => {\r\n        setQuestionsAndAnswers(prevState => [...prevState, { question, answer: '' }]); // Render the question immediately\r\n\r\n        try {\r\n            const responseData = await ApiCall(question);\r\n            updateAnswer(responseData.message, question); // Update the answer once the response is received\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n            updateAnswer('An error occurred while fetching data.', question); // Handle error\r\n        }\r\n    };\r\n\r\n    const updateAnswer = (answer, question) => {\r\n        setQuestionsAndAnswers(prevState =>\r\n            prevState.map(qa => (qa.question === question ? { ...qa, answer } : qa))\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div style={{ overflowY: 'auto', maxHeight: '80vh', padding: '10px' }}> {/* Add styling to prevent overlapping */}\r\n            {questionsAndAnswers.map((qa, index) => (\r\n                <div key={index}>\r\n                    <Message question={qa.question} />\r\n                    {qa.answer && <Message question={qa.answer} />} {/* Render the answer if available */}\r\n                </div>\r\n            ))}\r\n            <InputBox onSubmit={handleQuestionSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n// export default function ChatWindow(){\r\n//     const [question, setQuestion] = useState('');\r\n//     const [response, setResponse] = useState(null);\r\n//     // useEffect hook to fetch data from the API when the component mounts or question changes\r\n//     useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             if (question.trim() !== '') { // Only fetch data if the question is not empty\r\n//                 try {\r\n//                     const responseData = await ApiCall(question);\r\n//                     setResponse(responseData); // Update component state with the response from the API\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching data:', error);\r\n//                 }\r\n//             }\r\n//         };\r\n//         fetchData(); // Call the fetchData function\r\n//     }, [question]); // Run useEffect whenever the question state changes\r\n\r\n//     const handleQuestionSubmit = (question) => {\r\n//         setQuestion(question)\r\n//         setResponse(null);\r\n//     }\r\n//     return(\r\n//         <>\r\n//         <div>\r\n//             <Message question={question} />\r\n//             {console.log('Response condition:', response)} {/* Log the condition */}\r\n//             {response && <Message question={response.message} />} {/* Render the response message if available */}\r\n//             <InputBox onSubmit={handleQuestionSubmit} />\r\n//         </div>\r\n//         </>\r\n//     )\r\n// }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhC,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElE,MAAMW,oBAAoB,GAAG,MAAOC,QAAQ,IAAK;IAC7CF,sBAAsB,CAACG,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE;MAAED,QAAQ;MAAEE,MAAM,EAAE;IAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE/E,IAAI;MACA,MAAMC,YAAY,GAAG,MAAMX,OAAO,CAACQ,QAAQ,CAAC;MAC5CI,YAAY,CAACD,YAAY,CAACE,OAAO,EAAEL,QAAQ,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CF,YAAY,CAAC,wCAAwC,EAAEJ,QAAQ,CAAC,CAAC,CAAC;IACtE;EACJ,CAAC;EAED,MAAMI,YAAY,GAAGA,CAACF,MAAM,EAAEF,QAAQ,KAAK;IACvCF,sBAAsB,CAACG,SAAS,IAC5BA,SAAS,CAACO,GAAG,CAACC,EAAE,IAAKA,EAAE,CAACT,QAAQ,KAAKA,QAAQ,GAAG;MAAE,GAAGS,EAAE;MAAEP;IAAO,CAAC,GAAGO,EAAG,CAC3E,CAAC;EACL,CAAC;EAED,oBACIf,OAAA;IAAKgB,KAAK,EAAE;MAAEC,SAAS,EAAE,MAAM;MAAEC,SAAS,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,GAAC,GAAC,EACnEjB,mBAAmB,CAACW,GAAG,CAAC,CAACC,EAAE,EAAEM,KAAK,kBAC/BrB,OAAA;MAAAoB,QAAA,gBACIpB,OAAA,CAACH,OAAO;QAACS,QAAQ,EAAES,EAAE,CAACT;MAAS;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACjCV,EAAE,CAACP,MAAM,iBAAIR,OAAA,CAACH,OAAO;QAACS,QAAQ,EAAES,EAAE,CAACP;MAAO;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,GAAC;IAAA,GAF1CJ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACR,CAAC,eACFzB,OAAA,CAACJ,QAAQ;MAAC8B,QAAQ,EAAErB;IAAqB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEd;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAvB,EAAA,CArEwBD,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}