{"ast":null,"code":"var _jsxFileName = \"E:\\\\F\\\\8th semester\\\\full stack\\\\AI asistant\\\\project\\\\restaurant-chatbot\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport InputBox from './InputBox';\nimport Message from './Message';\nimport { ApiCall } from './Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatWindow() {\n  _s();\n  const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  useEffect(() => {\n    // This effect will run when questionsAndAnswers state changes\n  }, [questionsAndAnswers]);\n  const handleQuestionSubmit = async question => {\n    try {\n      const responseData = await ApiCall(question);\n      setQuestionsAndAnswers(prevState => [...prevState, {\n        question,\n        answer: responseData.message\n      }]);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [questionsAndAnswers.map((qa, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        question: qa.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        question: qa.answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(InputBox, {\n      onSubmit: handleQuestionSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n// export default function ChatWindow(){\n//     const [question, setQuestion] = useState('');\n//     const [response, setResponse] = useState(null);\n//     // useEffect hook to fetch data from the API when the component mounts or question changes\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             if (question.trim() !== '') { // Only fetch data if the question is not empty\n//                 try {\n//                     const responseData = await ApiCall(question);\n//                     setResponse(responseData); // Update component state with the response from the API\n//                 } catch (error) {\n//                     console.error('Error fetching data:', error);\n//                 }\n//             }\n//         };\n//         fetchData(); // Call the fetchData function\n//     }, [question]); // Run useEffect whenever the question state changes\n\n//     const handleQuestionSubmit = (question) => {\n//         setQuestion(question)\n//         setResponse(null);\n//     }\n//     return(\n//         <>\n//         <div>\n//             <Message question={question} />\n//             {console.log('Response condition:', response)} {/* Log the condition */}\n//             {response && <Message question={response.message} />} {/* Render the response message if available */}\n//             <InputBox onSubmit={handleQuestionSubmit} />\n//         </div>\n//         </>\n//     )\n// }\n_s(ChatWindow, \"mc4ZG32w4Swn2nH/KMycuMpvi+w=\");\n_c = ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","InputBox","Message","ApiCall","jsxDEV","_jsxDEV","ChatWindow","_s","questionsAndAnswers","setQuestionsAndAnswers","handleQuestionSubmit","question","responseData","prevState","answer","message","error","console","children","map","qa","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["E:/F/8th semester/full stack/AI asistant/project/restaurant-chatbot/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport InputBox from './InputBox';\r\nimport Message from './Message';\r\nimport { ApiCall } from './Api';\r\n\r\n\r\n\r\nexport default function ChatWindow() {\r\n    const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // This effect will run when questionsAndAnswers state changes\r\n    }, [questionsAndAnswers]);\r\n\r\n    const handleQuestionSubmit = async (question) => {\r\n        try {\r\n            const responseData = await ApiCall(question);\r\n            setQuestionsAndAnswers(prevState => [\r\n                ...prevState,\r\n                { question, answer: responseData.message }\r\n            ]);\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {questionsAndAnswers.map((qa, index) => (\r\n                <div key={index}>\r\n                    <Message question={qa.question} />\r\n                    <Message question={qa.answer} />\r\n                </div>\r\n            ))}\r\n            <InputBox onSubmit={handleQuestionSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n// export default function ChatWindow(){\r\n//     const [question, setQuestion] = useState('');\r\n//     const [response, setResponse] = useState(null);\r\n//     // useEffect hook to fetch data from the API when the component mounts or question changes\r\n//     useEffect(() => {\r\n//         const fetchData = async () => {\r\n//             if (question.trim() !== '') { // Only fetch data if the question is not empty\r\n//                 try {\r\n//                     const responseData = await ApiCall(question);\r\n//                     setResponse(responseData); // Update component state with the response from the API\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching data:', error);\r\n//                 }\r\n//             }\r\n//         };\r\n//         fetchData(); // Call the fetchData function\r\n//     }, [question]); // Run useEffect whenever the question state changes\r\n\r\n//     const handleQuestionSubmit = (question) => {\r\n//         setQuestion(question)\r\n//         setResponse(null);\r\n//     }\r\n//     return(\r\n//         <>\r\n//         <div>\r\n//             <Message question={question} />\r\n//             {console.log('Response condition:', response)} {/* Log the condition */}\r\n//             {response && <Message question={response.message} />} {/* Render the response message if available */}\r\n//             <InputBox onSubmit={handleQuestionSubmit} />\r\n//         </div>\r\n//         </>\r\n//     )\r\n// }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIhC,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElEC,SAAS,CAAC,MAAM;IACZ;EAAA,CACH,EAAE,CAACQ,mBAAmB,CAAC,CAAC;EAEzB,MAAME,oBAAoB,GAAG,MAAOC,QAAQ,IAAK;IAC7C,IAAI;MACA,MAAMC,YAAY,GAAG,MAAMT,OAAO,CAACQ,QAAQ,CAAC;MAC5CF,sBAAsB,CAACI,SAAS,IAAI,CAChC,GAAGA,SAAS,EACZ;QAAEF,QAAQ;QAAEG,MAAM,EAAEF,YAAY,CAACG;MAAQ,CAAC,CAC7C,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,oBACIX,OAAA;IAAAa,QAAA,GACKV,mBAAmB,CAACW,GAAG,CAAC,CAACC,EAAE,EAAEC,KAAK,kBAC/BhB,OAAA;MAAAa,QAAA,gBACIb,OAAA,CAACH,OAAO;QAACS,QAAQ,EAAES,EAAE,CAACT;MAAS;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClCpB,OAAA,CAACH,OAAO;QAACS,QAAQ,EAAES,EAAE,CAACN;MAAO;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAF1BJ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACR,CAAC,eACFpB,OAAA,CAACJ,QAAQ;MAACyB,QAAQ,EAAEhB;IAAqB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEd;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAlB,EAAA,CAlEwBD,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}