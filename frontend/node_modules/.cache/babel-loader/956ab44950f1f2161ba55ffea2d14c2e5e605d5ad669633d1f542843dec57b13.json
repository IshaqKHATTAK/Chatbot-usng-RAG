{"ast":null,"code":"var _jsxFileName = \"E:\\\\F\\\\8th semester\\\\full stack\\\\AI asistant\\\\project\\\\restaurant-chatbot\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport InputBox from './InputBox';\nimport Message from './Message';\nimport { ApiCall } from './Api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatWindow() {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [response, setResponse] = useState(null);\n  // useEffect hook to fetch data from the API when the component mounts or question changes\n  useEffect(() => {\n    const fetchData = async () => {\n      if (question.trim() !== '') {\n        // Only fetch data if the question is not empty\n        try {\n          const responseData = await ApiCall(question);\n          setResponse(responseData); // Update component state with the response from the API\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      }\n    };\n    fetchData(); // Call the fetchData function\n  }, [question]); // Run useEffect whenever the question state changes\n\n  const handleQuestionSubmit = question => {\n    setQuestion(question);\n    setResponse(null);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        question: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), response && /*#__PURE__*/_jsxDEV(Message, {\n        text: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 26\n      }, this), \" \", /*#__PURE__*/_jsxDEV(InputBox, {\n        onSubmit: handleQuestionSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(ChatWindow, \"oZ+NULiVtz2LR7EucKMDqkY23PE=\");\n_c = ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","InputBox","Message","ApiCall","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","_s","question","setQuestion","response","setResponse","fetchData","trim","responseData","error","console","handleQuestionSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","text","message","onSubmit","_c","$RefreshReg$"],"sources":["E:/F/8th semester/full stack/AI asistant/project/restaurant-chatbot/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport InputBox from './InputBox';\r\nimport Message from './Message';\r\nimport { ApiCall } from './Api';\r\nexport default function ChatWindow(){\r\n    const [question, setQuestion] = useState('');\r\n    const [response, setResponse] = useState(null);\r\n    // useEffect hook to fetch data from the API when the component mounts or question changes\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (question.trim() !== '') { // Only fetch data if the question is not empty\r\n                try {\r\n                    const responseData = await ApiCall(question);\r\n                    setResponse(responseData); // Update component state with the response from the API\r\n                } catch (error) {\r\n                    console.error('Error fetching data:', error);\r\n                }\r\n            }\r\n        };\r\n        fetchData(); // Call the fetchData function\r\n    }, [question]); // Run useEffect whenever the question state changes\r\n\r\n    const handleQuestionSubmit = (question) => {\r\n        setQuestion(question)\r\n        setResponse(null);\r\n    }\r\n    return(\r\n        <>\r\n        <div>\r\n            <Message question={question} />\r\n            {response && <Message text={response.message} />} {/* Render the response message if available */}\r\n            \r\n            <InputBox onSubmit={handleQuestionSubmit} />\r\n        </div>\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAChC,eAAe,SAASC,UAAUA,CAAA,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAIJ,QAAQ,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAAE;QAC1B,IAAI;UACA,MAAMC,YAAY,GAAG,MAAMb,OAAO,CAACO,QAAQ,CAAC;UAC5CG,WAAW,CAACG,YAAY,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAChD;MACJ;IACJ,CAAC;IACDH,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,MAAMS,oBAAoB,GAAIT,QAAQ,IAAK;IACvCC,WAAW,CAACD,QAAQ,CAAC;IACrBG,WAAW,CAAC,IAAI,CAAC;EACrB,CAAC;EACD,oBACIR,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACAf,OAAA;MAAAe,QAAA,gBACIf,OAAA,CAACH,OAAO;QAACQ,QAAQ,EAAEA;MAAS;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC9BZ,QAAQ,iBAAIP,OAAA,CAACH,OAAO;QAACuB,IAAI,EAAEb,QAAQ,CAACc;MAAQ;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,GAAC,eAElDnB,OAAA,CAACJ,QAAQ;QAAC0B,QAAQ,EAAER;MAAqB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C;EAAC,gBACJ,CAAC;AAEX;AAACf,EAAA,CAhCuBD,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}